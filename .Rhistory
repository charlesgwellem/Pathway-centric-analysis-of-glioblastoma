subtitle = paste(cell_type_1, "and", cell_type_2),
y = paste("Convolution Output (CDF-based Interaction between", cell_type_1, "\nand", cell_type_2, ")"),
x = "Index"
) +
scale_color_manual(values = c("tumor" = "red", "non_tumor" = "blue")) +
theme_minimal()
# Conditionally add text annotation for the tumor peak (if valid)
if (!is.na(tumor_peak_pseudotime)) {
p <- p + annotate("text", x = peak_tumor, y = conv_tumor[peak_tumor],
label = paste0("Peak at Pseudotime: ", round(tumor_peak_pseudotime, 2)),
color = "red", vjust = -1.5, size = 4)
}
# Conditionally add text annotation for the non-tumor peak (if valid)
if (!is.na(non_tumor_peak_pseudotime)) {
p <- p + annotate("text", x = peak_non_tumor, y = conv_non_tumor_padded[peak_non_tumor],
label = paste0("Peak at Pseudotime: ", round(non_tumor_peak_pseudotime, 2)),
color = "blue", vjust = -1.5, size = 4)
}
# Print and save the plot for each cell type
print(p)
ggsave(filename = paste0("Convolution_CDF_", cell_type_1, "_vs_", cell_type_2, ".png"), plot = p)
}
require(graphics)
x <- c(0,0,0,100,0,0,0)
y <- c(0,0,1, 2 ,1,0,0)/4
zapsmall(convolve(x, y))         #  *NOT* what you first thought.
zapsmall(convolve(x, y[3:5], type = "f")) # rather
x <- rnorm(50)
y <- rnorm(50)
# Circular convolution *has* this symmetry:
all.equal(convolve(x, y, conj = FALSE), rev(convolve(rev(y),x)))
n <- length(x <- -20:24)
y <- (x-10)^2/1000 + rnorm(x)/8
Han <- function(y) # Hanning
convolve(y, c(1,2,1)/4, type = "filter")
plot(x, y, main = "Using  convolve(.) for Hanning filters")
lines(x[-c(1  , n)      ], Han(y), col = "red")
lines(x[-c(1:2, (n-1):n)], Han(Han(y)), lwd = 2, col = "dark blue")
## Not run:
#  Skew-normal / logistic example:
dens1 <- function(x, shape=4)
# skew-normal distribution's density
# see also: http://azzalini.stat.unipd.it/SN/Intro
{
return(2 * dnorm(x) * pnorm(shape * x))
}
dens2 <- function(x)
# logistic distribution's density
{
return(dlogis(x, location=0, scale=1))
}
rskewnorm <- function(n, shape=4)
# skew-normal random number generation
# (according to http://azzalini.stat.unipd.it/SN/faq-r.html)
{
delta <- shape / sqrt(shape^2+1)
u1 <- rnorm(n); v <- rnorm(n)
u2 <- delta * u1 + sqrt(1-delta^2) * v
return(apply(cbind(u1,u2), 1, function(x){ifelse(x[1]>=0, x[2], -x[2])}))
}
# compute convolution:
conv <- convolve(dens1, dens2)
dens1 <- function(x, shape=4)
# skew-normal distribution's density
# see also: http://azzalini.stat.unipd.it/SN/Intro
{
return(2 * dnorm(x) * pnorm(shape * x))
}
dens2 <- function(x)
# logistic distribution's density
{
return(dlogis(x, location=0, scale=1))
}
rskewnorm <- function(n, shape=4)
# skew-normal random number generation
# (according to http://azzalini.stat.unipd.it/SN/faq-r.html)
{
delta <- shape / sqrt(shape^2+1)
u1 <- rnorm(n); v <- rnorm(n)
u2 <- delta * u1 + sqrt(1-delta^2) * v
return(apply(cbind(u1,u2), 1, function(x){ifelse(x[1]>=0, x[2], -x[2])}))
}
# compute convolution:
conv <- convolve(dens1, dens2)
# Load the dataset into a new variable
gsva.es_temp_new <- gsva.es_temp
# Remove "HALLMARK_" prefix from column names
colnames(gsva.es_temp_new) <- gsub("HALLMARK_", "", colnames(gsva.es_temp_new))
# List of cell types (excluding Cytotoxic T cells)
cell_types <- colnames(gsva.es_temp_new)[1:50]  # Add your list here
cell_type_1 <- "Reg_T"  # Fixed cell type
# Align gsva.es_temp_new with gsvaPar_cell_markers.es
gsva.es_temp_new <- gsva.es_temp_new[rownames(gsvaPar_cell_markers.es), ]
all(rownames(gsva.es_temp_new) == rownames(gsvaPar_cell_markers.es))
# Ensure that the selected cell type is included properly
gsva.es_temp_new[, cell_type_1] <- gsvaPar_cell_markers.es[, cell_type_1]
# Relocate Reg_T to the first column
gsva.es_temp_new <- relocate(gsva.es_temp_new, cell_type_1, .before = 1)
# Define a helper function to compute the CDF of a vector
compute_cdf <- function(x) {
return(ecdf(x)(x))  # Compute the empirical CDF and return the transformed values
}
# Initialize a data frame to store results
results <- data.frame(Cell_Type = character(),
Peak_Pseudotime = numeric(),
Peak_Broadness = numeric())
# Loop through each cell type and perform the convolution analysis
for (cell_type_2 in cell_types) {
# Sort data by pseudotime (log_pt)
gsva.es_temp_new <- gsva.es_temp_new[order(gsva.es_temp_new$log_pt), ]
# Subset the data for non-tumor and tumor groups
non_tumor <- subset(gsva.es_temp_new, Group == "non-tumor")
non_tumor <- non_tumor[order(non_tumor$log_pt), ]
tumor <- subset(gsva.es_temp_new, Group == "glioblastoma, grade 4")
tumor <- tumor[order(tumor$log_pt), ]
# Apply CDF to both tumor and non-tumor data for Reg_T and the current cell type
tumor[[cell_type_1]] <- compute_cdf(tumor[[cell_type_1]])
tumor[[cell_type_2]] <- compute_cdf(tumor[[cell_type_2]])
non_tumor[[cell_type_1]] <- compute_cdf(non_tumor[[cell_type_1]])
non_tumor[[cell_type_2]] <- compute_cdf(non_tumor[[cell_type_2]])
# Perform convolution for tumor and non-tumor data using CDF values
conv_tumor <- convolve(tumor[[cell_type_1]], rev(tumor[[cell_type_2]]), type = "open")
conv_non_tumor <- convolve(non_tumor[[cell_type_1]], rev(non_tumor[[cell_type_2]]), type = "open")
# Find peaks for tumor and non-tumor data
if (!all(is.na(conv_tumor)) && length(unique(conv_tumor)) > 1) {
peak_tumor <- which.max(conv_tumor)
tumor_peak_pseudotime <- tumor$log_pt[peak_tumor]
# Calculate peak broadness for tumor
peak_value <- conv_tumor[peak_tumor]
half_max <- peak_value / 2  # Half maximum
# Find where convolution value is closest to half_max on both sides of the peak
left_index <- max(which(conv_tumor[1:peak_tumor] <= half_max), na.rm = TRUE)
right_index <- min(which(conv_tumor[peak_tumor:length(conv_tumor)] <= half_max), na.rm = TRUE) + peak_tumor - 1
tumor_peak_broadness <- right_index - left_index
} else {
tumor_peak_pseudotime <- NA
tumor_peak_broadness <- NA
}
if (!all(is.na(conv_non_tumor)) && length(unique(conv_non_tumor)) > 1) {
peak_non_tumor <- which.max(conv_non_tumor)
non_tumor_peak_pseudotime <- non_tumor$log_pt[peak_non_tumor]
} else {
non_tumor_peak_pseudotime <- NA
}
# Append the results to the data frame
results <- rbind(results, data.frame(
Cell_Type = cell_type_2,
Peak_Pseudotime = tumor_peak_pseudotime,
Peak_Broadness = tumor_peak_broadness
))
# Pad conv_non_tumor with zeros to match the length of conv_tumor
conv_non_tumor_padded <- c(conv_non_tumor, rep(0, length(conv_tumor) - length(conv_non_tumor)))
# Combine results into a data frame for plotting
comparison_data <- data.frame(
Index = 1:length(conv_tumor),
tumor = conv_tumor,
non_tumor = conv_non_tumor_padded
)
# Create the base plot
p <- ggplot(comparison_data, aes(x = Index)) +
geom_smooth(aes(y = tumor, color = "tumor"),
method = "loess", se = FALSE, span = 0.2, size = 1) +
geom_smooth(aes(y = non_tumor, color = "non_tumor"),
method = "loess", se = FALSE, span = 0.2, size = 1, linetype = "dashed") +
labs(
title = paste("Convolution Results:", cell_type_1, "vs", cell_type_2, "\nin Tumor vs Non-tumor"),
subtitle = paste(cell_type_1, "and", cell_type_2),
y = paste("Convolution Output (CDF-based Interaction between", cell_type_1, "\nand", cell_type_2, ")"),
x = "Pseudotime (Ordered by log_pt)"
) +
scale_color_manual(values = c("tumor" = "red", "non_tumor" = "blue")) +
theme_minimal()
# Annotate peaks (tumor and non-tumor)
if (!is.na(tumor_peak_pseudotime)) {
p <- p + annotate("text", x = peak_tumor, y = conv_tumor[peak_tumor],
label = paste0("Peak at Pseudotime: ", round(tumor_peak_pseudotime, 2)),
color = "red", vjust = -1.5, size = 4)
}
if (!is.na(non_tumor_peak_pseudotime)) {
p <- p + annotate("text", x = peak_non_tumor, y = conv_non_tumor_padded[peak_non_tumor],
label = paste0("Peak at Pseudotime: ", round(non_tumor_peak_pseudotime, 2)),
color = "blue", vjust = -1.5, size = 4)
}
# Print and save the plot for each cell type
print(p)
ggsave(filename = paste0("Convolution_CDF_", cell_type_1, "_vs_", cell_type_2, ".png"), plot = p)
}
# Print out the results for peak pseudotime and broadness
print(results)
# Order the results by Peak Broadness
results <- results[order(results$Peak_Broadness, decreasing = TRUE), ]
# Define a helper function to compute the PDF using kernel density estimation
compute_pdf <- function(x) {
pdf_estimation <- density(x)  # Estimate the kernel density
return(approx(pdf_estimation$x, pdf_estimation$y, xout = x)$y)  # Interpolate the PDF values at the original x points
}
# Initialize a data frame to store results
results <- data.frame(Cell_Type = character(),
Peak_Pseudotime = numeric(),
Peak_Broadness = numeric())
# Loop through each cell type and perform the convolution analysis using PDF
for (cell_type_2 in cell_types) {
# Sort data by pseudotime (log_pt)
gsva.es_temp_new <- gsva.es_temp_new[order(gsva.es_temp_new$log_pt), ]
# Subset the data for non-tumor and tumor groups
non_tumor <- subset(gsva.es_temp_new, Group == "non-tumor")
non_tumor <- non_tumor[order(non_tumor$log_pt), ]
tumor <- subset(gsva.es_temp_new, Group == "glioblastoma, grade 4")
tumor <- tumor[order(tumor$log_pt), ]
# Apply PDF to both tumor and non-tumor data for Reg_T and the current cell type
tumor[[cell_type_1]] <- compute_pdf(tumor[[cell_type_1]])
tumor[[cell_type_2]] <- compute_pdf(tumor[[cell_type_2]])
non_tumor[[cell_type_1]] <- compute_pdf(non_tumor[[cell_type_1]])
non_tumor[[cell_type_2]] <- compute_pdf(non_tumor[[cell_type_2]])
# Perform convolution for tumor and non-tumor data using PDF values
conv_tumor <- convolve(tumor[[cell_type_1]], rev(tumor[[cell_type_2]]), type = "open")
conv_non_tumor <- convolve(non_tumor[[cell_type_1]], rev(non_tumor[[cell_type_2]]), type = "open")
# Find peaks for tumor and non-tumor data
if (!all(is.na(conv_tumor)) && length(unique(conv_tumor)) > 1) {
peak_tumor <- which.max(conv_tumor)
tumor_peak_pseudotime <- tumor$log_pt[peak_tumor]
# Calculate peak broadness for tumor
peak_value <- conv_tumor[peak_tumor]
half_max <- peak_value / 2  # Half maximum
# Find where convolution value is closest to half_max on both sides of the peak
left_index <- max(which(conv_tumor[1:peak_tumor] <= half_max), na.rm = TRUE)
right_index <- min(which(conv_tumor[peak_tumor:length(conv_tumor)] <= half_max), na.rm = TRUE) + peak_tumor - 1
tumor_peak_broadness <- right_index - left_index
} else {
tumor_peak_pseudotime <- NA
tumor_peak_broadness <- NA
}
if (!all(is.na(conv_non_tumor)) && length(unique(conv_non_tumor)) > 1) {
peak_non_tumor <- which.max(conv_non_tumor)
non_tumor_peak_pseudotime <- non_tumor$log_pt[peak_non_tumor]
} else {
non_tumor_peak_pseudotime <- NA
}
# Append the results to the data frame
results <- rbind(results, data.frame(
Cell_Type = cell_type_2,
Peak_Pseudotime = tumor_peak_pseudotime,
Peak_Broadness = tumor_peak_broadness
))
# Pad conv_non_tumor with zeros to match the length of conv_tumor
conv_non_tumor_padded <- c(conv_non_tumor, rep(0, length(conv_tumor) - length(conv_non_tumor)))
# Combine results into a data frame for plotting
comparison_data <- data.frame(
Index = 1:length(conv_tumor),
tumor = conv_tumor,
non_tumor = conv_non_tumor_padded
)
# Create the base plot
p <- ggplot(comparison_data, aes(x = Index)) +
geom_point(aes(y = tumor, color = "tumor", shape = "Tumor"), size = 1.5, alpha = 0.6) +
geom_point(aes(y = non_tumor, color = "non_tumor", shape = "Non-tumor"), size = 1.5, alpha = 0.6) +
geom_smooth(aes(y = tumor, color = "tumor"), method = "loess", se = FALSE, span = 0.2, size = 1.2) +
geom_smooth(aes(y = non_tumor, color = "non_tumor"), method = "loess", se = FALSE, span = 0.2, size = 1.2, linetype = "dashed") +
labs(
title = paste("Convolution Results with PDF:", cell_type_1, "vs", cell_type_2, "\nin Tumor vs Non-tumor"),
subtitle = paste(cell_type_1, "and", cell_type_2),
y = paste("Convolution Output (PDF-based Interaction between", cell_type_1, "and", cell_type_2, ")"),
x = "Pseudotime (Ordered by log_pt)"
) +
scale_color_manual(values = c("tumor" = "red", "non_tumor" = "blue")) +
scale_shape_manual(values = c("Tumor" = 16, "Non-tumor" = 17)) +
theme_minimal()
# Annotate peaks (tumor and non-tumor)
if (!is.na(tumor_peak_pseudotime)) {
p <- p + annotate("text", x = peak_tumor, y = conv_tumor[peak_tumor],
label = paste0("Peak at Pseudotime: ", round(tumor_peak_pseudotime, 2)),
color = "red", vjust = -1.5, size = 4)
}
if (!is.na(non_tumor_peak_pseudotime)) {
p <- p + annotate("text", x = peak_non_tumor, y = conv_non_tumor_padded[peak_non_tumor],
label = paste0("Peak at Pseudotime: ", round(non_tumor_peak_pseudotime, 2)),
color = "blue", vjust = -1.5, size = 4)
}
# Print and save the plot for each cell type
print(p)
ggsave(filename = paste0("Convolution_PDF_", cell_type_1, "_vs_", cell_type_2, ".png"), plot = p)
}
# Print out the results for peak pseudotime and broadness
print(results)
# Order the results by Peak Broadness
results <- results[order(results$Peak_Broadness, decreasing = TRUE), ]
# Loop through each cell type and perform the convolution analysis
for (cell_type_2 in cell_types) {
# Sort data by pseudotime (log_pt)
gsva.es_temp_new <- gsva.es_temp_new[order(gsva.es_temp_new$log_pt), ]
# Subset the data for non-tumor and tumor groups
non_tumor <- subset(gsva.es_temp_new, Group == "non-tumor")
non_tumor <- non_tumor[order(non_tumor$log_pt), ]
tumor <- subset(gsva.es_temp_new, Group == "glioblastoma, grade 4")
tumor <- tumor[order(tumor$log_pt), ]
# Perform convolution for tumor and non-tumor data with the selected cell types
conv_tumor <- convolve(tumor[[cell_type_1]], rev(tumor[[cell_type_2]]), type = "open")
conv_non_tumor <- convolve(non_tumor[[cell_type_1]], rev(non_tumor[[cell_type_2]]), type = "open")
# Combine results for tumor and non-tumor data
comparison_data <- data.frame(
Index = 1:length(conv_tumor),
tumor = conv_tumor,
non_tumor = c(conv_non_tumor, rep(0, length(conv_tumor) - length(conv_non_tumor))),  # pad with zeros
Group = c(rep("Tumor", length(conv_tumor)), rep("Non-tumor", length(conv_non_tumor)))
)
# Create the base plot with points and smooth lines
p <- ggplot(comparison_data, aes(x = Index)) +
# Plot points, colored by the Group (Tumor or Non-tumor)
geom_point(aes(y = tumor, color = "Tumor"), size = 2, alpha = 0.7) +
geom_point(aes(y = non_tumor, color = "Non-tumor"), size = 2, alpha = 0.7) +
# Add LOESS-smoothed lines for each group
geom_smooth(aes(y = tumor, color = "Tumor"), method = "loess", se = FALSE, span = 0.2, size = 1.2) +
geom_smooth(aes(y = non_tumor, color = "Non-tumor"), method = "loess", se = FALSE, span = 0.2, size = 1.2, linetype = "dashed") +
# Customize plot labels and theme
labs(
title = paste("Convolution Results:", cell_type_1, "vs", cell_type_2, "\nin Tumor vs Non-tumor"),
subtitle = paste(cell_type_1, "and", cell_type_2),
y = paste("Convolution Output (Interaction between", cell_type_1, "\nand", cell_type_2, ")"),
x = "Pseudotime (Ordered by log_pt)"
) +
scale_color_manual(values = c("Tumor" = "red", "Non-tumor" = "blue")) +
theme_minimal()
print(p)
# Conditionally add text annotation for the tumor peak (if valid)
if (!is.na(conv_tumor)) {
peak_tumor <- which.max(conv_tumor)
p <- p + annotate("text", x = peak_tumor, y = conv_tumor[peak_tumor],
label = paste0("Peak at Pseudotime: ", round(tumor$log_pt[peak_tumor], 2)),
color = "red", vjust = -1.5, size = 4)
}
# Conditionally add text annotation for the non-tumor peak (if valid)
if (!is.na(conv_non_tumor)) {
peak_non_tumor <- which.max(conv_non_tumor)
p <- p + annotate("text", x = peak_non_tumor, y = conv_non_tumor[peak_non_tumor],
label = paste0("Peak at Pseudotime: ", round(non_tumor$log_pt[peak_non_tumor], 2)),
color = "blue", vjust = -1.5, size = 4)
}
# Print and save the plot for each cell type
print(p)
ggsave(filename = paste0("Convolution_", cell_type_1, "_vs_", cell_type_2, ".png"), plot = p)
}
gsva.es_temp_new <- gsva.es_temp
colnames(gsva.es_temp_new) <- gsub("HALLMARK_", "", colnames(gsva.es_temp_new))
# List of all cell types (excluding Cytotoxic T cells)
cell_types <- colnames(gsva.es_temp_new)[1:50]  # Add your full list here
cell_type_1 <- "Reg_T" # "Cytotoxic_T_cell"  # Cytotoxic T cells are the fixed cell type
gsva.es_temp_new <- gsva.es_temp_new[rownames(gsvaPar_cell_markers.es), ]
all(rownames(gsva.es_temp_new) == rownames(gsvaPar_cell_markers.es))
# Ensure proper alignment between gsva.es_temp_new and gsvaPar_cell_markers.es
gsva.es_temp_new[, cell_type_1] <- gsvaPar_cell_markers.es[, cell_type_1]
gsva.es_temp_new <- relocate(gsva.es_temp_new,cell_type_1,
.before = 1)
gsva.es_temp_new %>%
correlate(method = "spearman") %>%
shave() %>%
rplot(print_cor = T) +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
hjust = 1))
gsva.es_temp_new[, 1:51] <- scale(gsva.es_temp_new[, 1:51])
# Initialize a data frame to store the results for each cell type
results <- data.frame(Cell_Type = character(),
Peak_Pseudotime = numeric(), Peak_Broadness = numeric())
# Loop through each cell type and perform the convolution analysis
for (cell_type_2 in cell_types) {
# Sort data by pseudotime (log_pt)
gsva.es_temp_new <- gsva.es_temp_new[order(gsva.es_temp_new$log_pt), ]
# Subset the data for non-tumor and tumor groups
non_tumor <- subset(gsva.es_temp_new, Group == "non-tumor")
# non_tumor[, 1:50] <- scale(non_tumor[, 1:50])
non_tumor <- non_tumor[order(non_tumor$log_pt), ]
tumor <- subset(gsva.es_temp_new, Group == "glioblastoma, grade 4")
# tumor[, 1:50] <- scale(tumor[, 1:50])
tumor <- tumor[order(tumor$log_pt), ]
# Perform convolution for tumor and non-tumor data with the selected cell types
conv_tumor <- convolve(tumor[[cell_type_1]], rev(tumor[[cell_type_2]]), type = "open")
conv_non_tumor <- convolve(non_tumor[[cell_type_1]], rev(non_tumor[[cell_type_2]]), type = "open")
# Find peaks for tumor and non-tumor data
if (!all(is.na(conv_tumor)) && length(unique(conv_tumor)) > 1) {
peak_tumor <- which.max(conv_tumor)
tumor_peak_pseudotime <- tumor$log_pt[peak_tumor]
# Calculate peak broadness for tumor
peak_value <- conv_tumor[peak_tumor]
half_max <- peak_value / 2  # Half maximum
# Find where convolution value is closest to half_max on both sides of the peak
left_index <- max(which(conv_tumor[1:peak_tumor] <= half_max), na.rm = TRUE)
right_index <- min(which(conv_tumor[peak_tumor:length(conv_tumor)] <= half_max), na.rm = TRUE) + peak_tumor - 1
tumor_peak_broadness <- right_index - left_index
} else {
tumor_peak_pseudotime <- NA
tumor_peak_broadness <- NA
}
if (!all(is.na(conv_non_tumor)) && length(unique(conv_non_tumor)) > 1) {
peak_non_tumor <- which.max(conv_non_tumor)
non_tumor_peak_pseudotime <- non_tumor$log_pt[peak_non_tumor]
} else {
non_tumor_peak_pseudotime <- NA
}
# Append the results to the data frame
results <- rbind(results, data.frame(
Cell_Type = cell_type_2,
Peak_Pseudotime = tumor_peak_pseudotime,
Peak_Broadness = tumor_peak_broadness
))
# Pad conv_non_tumor with zeros to match the length of conv_tumor
conv_non_tumor_padded <- c(conv_non_tumor, rep(0, length(conv_tumor) - length(conv_non_tumor)))
# Combine results into a data frame for plotting
comparison_data <- data.frame(
Index = 1:length(conv_tumor),
tumor = conv_tumor,
non_tumor = conv_non_tumor_padded
)
# Create the base plot
p <- ggplot(comparison_data, aes(x = Index)) +
# geom_line(aes(y = tumor, color = "tumor"), size = 1.2) +
#geom_line(aes(y = non_tumor, color = "non_tumor"), size = 1.2, linetype = "dashed") +
geom_point(aes(y = tumor, color = "tumor"), size = 2, alpha = 0.7) +
geom_point(aes(y = non_tumor, color = "non_tumor"), size = 2, alpha = 0.7) +
geom_smooth(aes(y = tumor, color = "tumor"),
method = "loess", se = FALSE, span = 0.2, size = 1) +
geom_smooth(aes(y = non_tumor, color = "non_tumor"),
method = "loess", se = FALSE, span = 0.2, size = 1, linetype = "dashed") +
labs(
title = paste("Convolution Results:", cell_type_1, "vs", cell_type_2, "\nin Tumor vs Non-tumor"),
subtitle = paste(cell_type_1, "and", cell_type_2),
y = paste("Convolution Output (Interaction between", cell_type_1, "\nand", cell_type_2, ")"),
x = "Pseudotime (Ordered by log_pt)"
) +
scale_color_manual(values = c("tumor" = "red", "non_tumor" = "blue")) +
theme_minimal()
print(p)
# Conditionally add text annotation for the tumor peak (if valid)
if (!is.na(tumor_peak_pseudotime)) {
p <- p + annotate("text", x = peak_tumor, y = conv_tumor[peak_tumor],
label = paste0("Peak at Pseudotime: ", round(tumor_peak_pseudotime, 2)),
color = "red", vjust = -1.5, size = 4)
}
# Conditionally add text annotation for the non-tumor peak (if valid)
if (!is.na(non_tumor_peak_pseudotime)) {
p <- p + annotate("text", x = peak_non_tumor, y = conv_non_tumor_padded[peak_non_tumor],
label = paste0("Peak at Pseudotime: ", round(non_tumor_peak_pseudotime, 2)),
color = "blue", vjust = -1.5, size = 4)
}
# Print and save the plot for each cell type
print(p)
ggsave(filename = paste0("Convolution_", cell_type_1, "_vs_", cell_type_2, ".png"), plot = p)
}
# Print out the results for peak pseudotime and broadness
print(results)
results <- results[order(results$Peak_Broadness, decreasing = T), ]
# Number of simulations
n <- 100000
# Simulate two independent uniform random points (X1, Y1) and (X2, Y2)
x1 <- runif(n)
x2 <- runif(n)
y1 <- runif(n)
y2 <- runif(n)
# Compute squared differences
x_diff_sq <- (x1 - x2)^2
y_diff_sq <- (y1 - y2)^2
# Sum of squared differences
z <- x_diff_sq + y_diff_sq
# Perform convolution
conv_result <- density(z)
# Plot the density of the convolution result (PDF of the distance squared)
plot(conv_result, main = "PDF of Sum of Squared Differences", xlab = "Sum of Squared Differences", col = "blue")
# Calculate the distance by taking the square root
distances <- sqrt(z)
# Plot the histogram of distances to get the PDF of distances
hist(distances, probability = TRUE, breaks = 50, main = "PDF of Distance Between Two Random Points",
xlab = "Distance", col = "lightgreen")
# Empirical CDF of distances
plot(ecdf(distances), main = "CDF of Distance Between Two Random Points",
xlab = "Distance", ylab = "Cumulative Probability", col = "red")
# Number of simulations
n <- 100000
# Simulate two independent uniform random points (X1, Y1) and (X2, Y2)
x1 <- runif(n)
x2 <- runif(n)
y1 <- runif(n)
y2 <- runif(n)
# Compute squared differences
x_diff_sq <- (x1 - x2)^2
y_diff_sq <- (y1 - y2)^2
# Sum of squared differences
z <- x_diff_sq + y_diff_sq
# Perform convolution
conv_result <- density(z)
# Plot the density of the convolution result (PDF of the distance squared)
plot(conv_result, main = "PDF of Sum of Squared Differences", xlab = "Sum of Squared Differences", col = "blue")
# Calculate the distance by taking the square root
distances <- sqrt(z)
# Plot the histogram of distances to get the PDF of distances
hist(distances, probability = TRUE, breaks = 50, main = "PDF of Distance Between Two Random Points",
xlab = "Distance", col = "lightgreen")
# Empirical CDF of distances
plot(ecdf(distances), main = "CDF of Distance Between Two Random Points",
xlab = "Distance", ylab = "Cumulative Probability", col = "red")
library(affy)
library(limma)
library(annotate)
library(hgu133plus2.db)
library(openxlsx)
library(ggplot2)
library(tidyverse)
library(escape)
library(GSVA)
library(pheatmap)
library(limma)
library(robustbase)
library(corrr)
library(tidyverse)
